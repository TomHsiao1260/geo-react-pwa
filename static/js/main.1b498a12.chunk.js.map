{"version":3,"sources":["logo.svg","textures/balloon.png","button.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["arr","path","overlay","App","props","containerRef","useRef","useEffect","Procedural","init","container","current","datasource","elevation","apiKey","imagery","urlFormat","attribution","setCameraModeControlVisible","setCompassVisible","setRotationControlVisible","setZoomControlVisible","displayLocation","latitude","longitude","onUserInteraction","console","log","onLocationFocused","data","forEach","i","push","lon","lat","objHeight","Math","floor","elev","features","addOverlay","card","ref","style","position","width","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1b498a12.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/balloon.f88b492f.png\";","import React, {Component, useRef, useEffect} from 'react';\nimport Procedural from 'procedural-gl';\nimport imgMoon from './img/moon.jpg';\nimport imgPeak from './img/peak.jpg';\nimport data from './data.json';\n\nconst arr = [];\n\nfunction Btn(){\n  data['trkpt'].forEach( i => {\n    arr.push( [i.lon, i.lat] );\n  })\n  return (\n    <>\n      <button className=\"btn btn-outline-light \" type=\"button\" style={{position: 'absolute', margin: '5px'}} onClick={() => Procedural.addOverlay( overlay )}>Mark 1</button>\n      <button className=\"btn btn btn-outline-light\" type=\"button\" style={{position: 'absolute', margin: '5px', left: '80px'}} onClick={() => Procedural.addOverlay( overlay_ )}>Mark 2</button>\n    </>\n  );\n}\n\nconst overlay = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [ {\n    \"geometry\": {\n      \"type\": \"LineString\",\n      \"coordinates\": arr\n    },\n    \"type\": \"Feature\",\n    \"id\": 0,\n    \"properties\": {\n      \"color\": \"#0000ff\"\n    }\n  }\n]\n}\n\nconst overlay_ = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [ \n    {\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [\n          [ 121.56, 25.19 ],\n          [ 121.55, 25.20 ]\n        ]\n      },\n      \"type\": \"Feature\",\n      \"id\": 0,\n      \"properties\": {\n        \"color\": \"#0000ff\"\n      }\n    },\n    {\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [ 121.56, 25.19 ]\n      },\n      \"type\": \"Feature\",\n      \"id\": 0,\n      \"properties\": {\n        \"anchorOffset\": {\n          \"y\": 70,\n          \"x\": 0\n        },\n        \"borderRadius\": 32,\n        \"image\": imgMoon,\n        \"height\": 60,\n        \"width\": 60,\n        \"borderWidth\": 2,\n        \"background\": \"#ccc\"\n      }\n    },\n    {\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [ 121.56, 25.19 ]\n      },\n      \"type\": \"Feature\",\n      \"id\": 0,\n      \"properties\": {\n        \"fontSize\": 20,\n        \"anchorOffset\": {\n          \"y\": 45,\n          \"x\": 0\n        },\n        \"icon\": \"caret-down\"\n      }\n    },\n    {\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [ 121.56, 25.19 ]\n      },\n      \"type\": \"Feature\",\n      \"id\": 0,\n      \"properties\": {\n        \"name\": \"3\",\n        \"borderRadius\": 23,\n        \"padding\": 5,\n        \"fontSize\": 13,\n        \"background\": \"#44b6f7\",\n        \"anchor\": \"bottom\"\n      }\n    },\n    {\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [ 121.55, 25.20 ]\n      },\n      \"type\": \"Feature\",\n      \"id\": 1,\n      \"properties\": {\n        \"anchorOffset\": {\n          \"y\": 70,\n          \"x\": 0\n        },\n        \"borderRadius\": 32,\n        \"image\": imgPeak,\n        \"height\": 60,\n        \"width\": 60,\n        \"borderWidth\": 2,\n        \"background\": \"#ccc\"\n      }\n    },\n    {\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [ 121.55, 25.20 ]\n      },\n      \"type\": \"Feature\",\n      \"id\": 1,\n      \"properties\": {\n        \"fontSize\": 20,\n        \"anchorOffset\": {\n          \"y\": 45,\n          \"x\": 0\n        },\n        \"icon\": \"caret-down\"\n      }\n    },\n    {\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [ 121.55, 25.20 ]\n      },\n      \"type\": \"Feature\",\n      \"id\": 1,\n      \"properties\": {\n        \"name\": \"5\",\n        \"borderRadius\": 23,\n        \"padding\": 5,\n        \"fontSize\": 13,\n        \"background\": \"#44b6f7\",\n        \"anchor\": \"bottom\"\n      }\n    }\n  ]\n}\n\nexport default Btn;","import React, {Component, useRef, useEffect} from 'react';\nimport * as THREE from \"three\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Btn from './button';\n\nimport Procedural from 'procedural-gl';\nimport imgMoon from './img/moon.jpg';\nimport imgPeak from './img/peak.jpg';\n\nimport balloon from './textures/balloon.png';\n\nimport data from './data.json';\nconst arr = [];\nconst height = [];\n\nfunction App(props){\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n\n    Procedural.init( {\n        container: containerRef.current,\n        datasource: {\n            elevation: {\n                apiKey: '16ea12ec8a8274c24b72283cf340d3779'\n            },\n            imagery: {\n                urlFormat: 'https://wmts.nlsc.gov.tw/wmts/PHOTO2/default/EPSG:3857/{z}/{y}/{x}.jpg',\n                attribution: 'Tiles &copy; <a href=\"https://www.basemap.at/\">basemap.at</a>'\n            }\n        }\n    } );\n\n    Procedural.setCameraModeControlVisible( true );\n    Procedural.setCompassVisible( false );\n    Procedural.setRotationControlVisible( true );\n    Procedural.setZoomControlVisible( true );\n\n\n  }, []);\n\n  useEffect(() => {\n\n        var target = { latitude: 24.21090, longitude: 121.37088 };\n        Procedural.displayLocation( target );\n        // var target = {\n        //   latitude: 24.20590, longitude: 121.37088,\n        //   angle: 20, bearing: 0, distance: 1000,\n        //   animationDuration: 0.5\n        // };\n        // Procedural.focusOnLocation( target );\n\n        Procedural.onUserInteraction = function () {\n          console.log(props);\n        }\n\n        Procedural.onLocationFocused = function () {\n            console.log( 'Location focused' );\n        };\n\n        data['trkpt'].forEach( (data, i) => {\n          arr.push( [data.lon, data.lat] );\n\n          if (i%100 == 0){\n            const objHeight = {\n              \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [data.lon, data.lat]\n              },\n              \"type\": \"Feature\",\n              \"id\": 1,\n              \"properties\": {\n                \"collapseDistance\": 1000,\n                \"fadeDistance\": 5000,\n                \"name\": Math.floor(data.elev),\n                \"background\": \"blue\",\n            \n                \"clipping\": \"object\",\n                \"color\": \"white\",\n                \"padding\": 10,\n                \"borderRadius\": 10,\n                \"borderWidth\": 1,\n                \"anchor\": \"left\",\n                \"icon\": \"eye\"\n              }\n            };\n            overlay.features.push( objHeight );\n          }\n        })\n\n        overlay.features.push( path );\n\n        Procedural.addOverlay( overlay );\n\n  }, [props.card])\n\n  return (\n    <>\n    <div ref={containerRef} style={{position: 'absolute', width: '100%', height: '100%'}} ></div>\n    {/* <Btn/> */}\n    </>\n  )\n\n}\n\nconst path = {\n  \"geometry\": {\n    \"type\": \"LineString\",\n    \"coordinates\": arr\n  },\n  \"type\": \"Feature\",\n  \"id\": 0,\n  \"properties\": {\n    \"color\": \"#0000ff\"\n  }\n}\n\nconst overlay = {\n  \"type\": \"FeatureCollection\",\n  \"features\": []\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}